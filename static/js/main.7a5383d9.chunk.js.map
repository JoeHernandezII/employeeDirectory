{"version":3,"sources":["components/testHeader/index.js","utils/API.js","components/Table/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","paddingLeft","transition","transitions","create","SearchAppBar","state","handleInputChange","handleFormSubmit","classes","className","AppBar","Toolbar","Typography","variant","noWrap","axios","get","EmployeeTable","results","userInput","event","preventDefault","value","target","name","setState","console","log","searchTerm","toFilter","regexp","RegExp","filteredResults","filter","el","test","first","last","phone","email","location","city","alert","sortByFirstName","firstNameSort","sort","a","b","nameA","nameB","result","this","getEmployees","API","then","res","data","catch","err","rows","TableContainer","component","Paper","style","marginTop","type","placeholder","aria-label","onChange","onClick","Table","TableHead","TableRow","TableCell","align","TableSortLabel","TableBody","length","map","key","id","scope","Avatar","alt","src","picture","thumbnail","colSpan","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7a5383d9.chunk.js","sourcesContent":["import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { fade, makeStyles } from '@material-ui/core/styles';\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        marginLeft: 0,\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(1),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        padding: theme.spacing(0, 2),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 0),\n        // vertical padding + font size from searchIcon\n        paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            width: '12ch',\n            '&:focus': {\n                width: '20ch',\n            },\n        },\n    },\n}));\n\nexport default function SearchAppBar({ state, handleInputChange, handleFormSubmit }) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root} >\n            <AppBar position=\"static\">\n                <Toolbar>\n                    {/* <IconButton\n                        edge=\"start\"\n                        className={classes.menuButton}\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                    >\n                        <MenuIcon />\n                    </IconButton> */}\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        Employee Directory\n          </Typography>\n                    {/* <div className={classes.search}>\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n                        <InputBase\n                            placeholder=\"Searchâ€¦\"\n                            classes={{\n                                root: classes.inputRoot,\n                                input: classes.inputInput,\n                            }}\n                            inputProps={{ 'aria-label': 'search' }}\n                            onChange={handleInputChange}\n                        />\n                    </div> */}\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}","import axios from \"axios\";\nexport default {\n    // Gets all users\n    getUsers: function () {\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n    }\n};","import React, { Component } from 'react';\nimport { TableContainer, Paper, Table, TableHead, TableCell, TableBody, TableRow, Avatar, TableSortLabel } from '@material-ui/core';\nimport API from '../../utils/API'\n\n//used class to store state\nclass EmployeeTable extends Component {\n    state = {\n        results: [],\n        userInput: \"\"\n    };\n    // when table component mounts get employees from API and assign to results state\n    componentDidMount() {\n        this.getEmployees();\n    };\n\n    // function to make api call\n    getEmployees() {\n        API.getUsers()\n            .then(res => this.setState({ results: res.data.results }))\n            .catch(err => console.log(err));\n    }\n\n    //update state with user input as it changes. must do so that userInput state is set before handleFormSubmit fires or the search wont be complete\n    handleInputChange = event => {\n        // Getting the value and name of the input which triggered the change\n        event.preventDefault();\n        let value = event.target.value;\n        const name = event.target.name;\n\n        //updating the input's state\n        this.setState({\n            [name]: value\n        });\n    };\n\n    //search employees. regexp allows search for exact and partial matches without the need to convert all to upper or lower etc. \n    handleFormSubmit = event => {\n        // Preventing the default behavior of the form submit (which is to refresh the page)\n        event.preventDefault();\n        if (!this.state.userInput) {\n            alert(\"Enter a search term before submitting.\");\n        } else {\n            console.log(this.state.userInput);\n            const searchTerm = this.state.userInput;\n            const toFilter = this.state.results;\n            const regexp = new RegExp(searchTerm, 'i');\n            console.log(toFilter)\n            const filteredResults = toFilter.filter(el =>\n                regexp.test(el.name.first)\n                || regexp.test(el.name.last)\n                || regexp.test(el.name.last)\n                || regexp.test(el.phone)\n                || regexp.test(el.email)\n                || regexp.test(el.location.city)\n                || regexp.test(el.location.state)\n            );\n            // const filteredResults = toFilter.filter(function (el) {\n            //     return el.name.first === searchTerm\n            //         || el.name.last === searchTerm\n            //         || el.email === searchTerm\n            //         || el.phone === searchTerm\n            // });\n            this.setState({ results: filteredResults })\n        }\n        //empty the search field after search complete\n        this.setState({\n            userInput: \"\"\n        });\n    };\n\n    sortByFirstName = () => {\n        let firstNameSort = this.state.results.sort(compare)\n        function compare(a, b) {\n            const nameA = a.name.first;\n            const nameB = b.name.first;\n            if (nameA > nameB) {\n                return 1;\n            } else if (nameA < nameB) {\n                return -1\n            } else if (nameA === nameB) {\n                return 0;\n            }\n        }\n        this.setState({ result: firstNameSort })\n    }\n\n    render() {\n        const rows = this.state.results;\n        return (\n\n\n\n            <TableContainer component={Paper} >\n                <form className=\"form-inline\" style={{ marginTop: \"5px\", marginLeft: \"5px\" }} >\n                    <input\n                        className=\"form-control mr-sm-2 m1\"\n                        type=\"search\"\n                        placeholder=\"Search\"\n                        aria-label=\"Search\"\n                        value={this.state.value}\n                        onChange={this.handleInputChange}\n                        name=\"userInput\" />\n                    <button\n                        className=\"btn btn-outline-primary my-2 my-sm-0\"\n                        type=\"submit\"\n                        onClick={this.handleFormSubmit}\n                    >Search</button>\n                    <button\n                        className=\"btn btn-outline-primary my-2 my-sm-0\"\n                        type=\"submit\"\n                        onClick={this.getEmployees}\n                        style={{ marginLeft: \"8px\" }}\n                    >Show All Employees</button>\n                </form>\n\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell></TableCell>\n                            <TableCell align=\"left\"><TableSortLabel onClick={this.sortByFirstName}>Name</TableSortLabel></TableCell>\n                            <TableCell align=\"left\">Phone Number</TableCell>\n                            <TableCell align=\"left\">Email</TableCell>\n                            <TableCell align=\"left\">Location</TableCell>\n                        </TableRow>\n                    </TableHead >\n                    <TableBody>\n                        {rows.length ?\n\n                            rows.map((res) => (\n                                <TableRow key={res.id.value}>\n                                    <TableCell component=\"th\" scope=\"rows\">\n                                        <Avatar alt={res.name.first} src={res.picture.thumbnail} />\n                                    </TableCell>\n                                    <TableCell align=\"left\">{res.name.first} {res.name.last}</TableCell>\n                                    <TableCell align=\"left\">{res.phone}</TableCell>\n                                    <TableCell align=\"left\">{res.email}</TableCell>\n                                    <TableCell align=\"left\">{res.location.city},    {res.location.state}</TableCell>\n                                </TableRow>\n                            ))\n                            :\n                            <TableRow>\n                                <TableCell align=\"center\" colSpan={5}>No results found</TableCell>\n                            </TableRow>\n                        }\n                    </TableBody>\n                </Table >\n            </TableContainer >\n\n        )\n    }\n};\n\nexport default EmployeeTable;","import React from 'react';\nimport './App.css';\nimport SearchAppBar from './components/testHeader';\nimport EmployeeTable from './components/Table';\n\n\n//class component to access input \nfunction App() {\n  return (\n    <div>\n      <SearchAppBar />\n      <EmployeeTable />\n    </div >\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}